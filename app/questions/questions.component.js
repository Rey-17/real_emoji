"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var mock_questions_1 = require("./mock-questions");
var QuestionsComponent = /** @class */ (function () {
    function QuestionsComponent(route, router) {
        var _this = this;
        this.route = route;
        this.router = router;
        this.changeYes = true;
        this.q2 = mock_questions_1.Questi;
        this.data = [];
        this.respuestas = [{ id: 1, q: 'Nada de acuerdo.' }, { id: 2, q: 'Algo de acuerdo.' }, { id: 3, q: 'Bastante de acuerdo.' }, { id: 4, q: 'Muy de acuerdo' }, { id: 5, q: 'Totalmente de acuerdo.' }];
        this.index = 0;
        this.f_ae = 0; // atencion emocional puntajes
        this.f_ce = 0; // claridad emocional
        this.f_re = 0; // reparaci√≥n de las emociones
        this.route.queryParams.subscribe(function (params) {
            _this.id_w = params['id'];
            _this.op_w = params['option'];
        });
    }
    QuestionsComponent.prototype.ngOnInit = function () {
        this.loadQ();
    };
    QuestionsComponent.prototype.loadQ = function () {
        if (this.index <= 23) {
            this.q_a = this.q2[this.index].q;
            this.q_ida = this.q2[this.index].id;
        }
    };
    QuestionsComponent.prototype.onItemTap = function (args) {
        var res = +args.index + 1;
        this.data.push({ id: this.q_ida, resp: res });
        if (this.q_ida <= 8) {
            this.f_ae += res;
        }
        else if (this.q_ida > 8 && this.q_ida <= 16) {
            this.f_ce += res;
        }
        else if (this.q_ida > 16 && this.q_ida <= 24) {
            this.f_re += res;
        }
        this.index++;
        if (this.index == 24) {
            var extras = {
                queryParams: {
                    atencion: this.f_ae,
                    claridad: this.f_ce,
                    reparacion: this.f_re,
                    data: JSON.stringify(this.data),
                    welcome: this.id_w
                }
            };
            console.dir(this.data);
            this.router.navigate(["/end"], extras);
        }
        else {
            this.loadQ();
        }
    };
    QuestionsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-questions',
            templateUrl: './questions.component.html',
            styleUrls: ['./questions.component.css']
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute, router_2.RouterExtensions])
    ], QuestionsComponent);
    return QuestionsComponent;
}());
exports.QuestionsComponent = QuestionsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInF1ZXN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBa0Q7QUFDbEQsMENBQWlFO0FBQ2pFLHNEQUE2RDtBQUU3RCxtREFBMEM7QUFRMUM7SUFrQkUsNEJBQW9CLEtBQXFCLEVBQVUsTUFBd0I7UUFBM0UsaUJBS0M7UUFMbUIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQWZwRSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQUUsR0FBVSx1QkFBTSxDQUFDO1FBQ25CLFNBQUksR0FBQyxFQUFFLENBQUM7UUFDUixlQUFVLEdBQUcsQ0FBQyxFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxrQkFBa0IsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsc0JBQXNCLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSx3QkFBd0IsRUFBQyxDQUFDLENBQUM7UUFFcEwsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUtWLFNBQUksR0FBVyxDQUFDLENBQUMsQ0FBRSw4QkFBOEI7UUFDakQsU0FBSSxHQUFXLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtRQUN2QyxTQUFJLEdBQVcsQ0FBQyxDQUFDLENBQUMsOEJBQThCO1FBR3JELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDckMsS0FBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsS0FBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQscUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxrQ0FBSyxHQUFMO1FBQ0UsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3JDLENBQUM7SUFDSCxDQUFDO0lBRUYsc0NBQVMsR0FBVCxVQUFVLElBQUk7UUFDWixJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDO1FBQ25CLENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQzNDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDO1FBQ25CLENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQzVDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDO1FBQ25CLENBQUM7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7UUFFZCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFDckIsSUFBSSxNQUFNLEdBQXFCO2dCQUM3QixXQUFXLEVBQUU7b0JBQ1gsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJO2lCQUNuQjthQUNGLENBQUM7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNKLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNmLENBQUM7SUFDSCxDQUFDO0lBL0RVLGtCQUFrQjtRQU45QixnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFdBQVcsRUFBRSw0QkFBNEI7WUFDekMsU0FBUyxFQUFFLENBQUMsMkJBQTJCLENBQUM7U0FDekMsQ0FBQzt5Q0FtQjJCLHVCQUFjLEVBQWtCLHlCQUFnQjtPQWxCaEUsa0JBQWtCLENBZ0U5QjtJQUFELHlCQUFDO0NBQUEsQUFoRUQsSUFnRUM7QUFoRVksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGUsIE5hdmlnYXRpb25FeHRyYXN9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7Um91dGVyRXh0ZW5zaW9uc30gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlclwiO1xuXG5pbXBvcnQgeyBRdWVzdGkgfSBmcm9tICcuL21vY2stcXVlc3Rpb25zJztcblxuQENvbXBvbmVudCh7XG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gIHNlbGVjdG9yOiAnYXBwLXF1ZXN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9xdWVzdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9xdWVzdGlvbnMuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFF1ZXN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHB1YmxpYyBpZF93OiBzdHJpbmc7XG4gIHB1YmxpYyBvcF93OiBzdHJpbmc7XG4gIHB1YmxpYyBjaGFuZ2VZZXMgPSB0cnVlO1xuXG4gIHB1YmxpYyBxMjogYW55W10gPSBRdWVzdGk7XG4gIHB1YmxpYyBkYXRhPVtdO1xuICBwdWJsaWMgcmVzcHVlc3RhcyA9IFt7aWQ6IDEgLHE6ICdOYWRhIGRlIGFjdWVyZG8uJ30se2lkOiAyLCBxOiAnQWxnbyBkZSBhY3VlcmRvLid9LCB7aWQ6IDMsIHE6ICdCYXN0YW50ZSBkZSBhY3VlcmRvLid9LCB7aWQ6IDQsIHE6ICdNdXkgZGUgYWN1ZXJkbyd9LHtpZDogNSwgcTogJ1RvdGFsbWVudGUgZGUgYWN1ZXJkby4nfV07XG5cbiAgcHVibGljIGluZGV4ID0gMDtcbiAgcHVibGljIHFfYTogYW55OyAgIC8vIHByZWd1bnRhXG4gIHB1YmxpYyBxX2lkYTogYW55OyAgLy8gaWRcbiAgcHVibGljIHJlc3BfYTogYW55OyAgLy8gcmVzcHVlc3RhXG5cbiAgcHVibGljIGZfYWU6IG51bWJlciA9IDA7ICAvLyBhdGVuY2lvbiBlbW9jaW9uYWwgcHVudGFqZXNcbiAgcHVibGljIGZfY2U6IG51bWJlciA9IDA7IC8vIGNsYXJpZGFkIGVtb2Npb25hbFxuICBwdWJsaWMgZl9yZTogbnVtYmVyID0gMDsgLy8gcmVwYXJhY2nDs24gZGUgbGFzIGVtb2Npb25lc1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyRXh0ZW5zaW9ucykge1xuICAgIHRoaXMucm91dGUucXVlcnlQYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICB0aGlzLmlkX3cgPSBwYXJhbXNbJ2lkJ107XG4gICAgICB0aGlzLm9wX3cgPSBwYXJhbXNbJ29wdGlvbiddO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sb2FkUSgpO1xuICAgfVxuXG4gICBsb2FkUSgpIHtcbiAgICAgaWYodGhpcy5pbmRleCA8PSAyMyl7XG4gICAgICB0aGlzLnFfYSA9IHRoaXMucTJbdGhpcy5pbmRleF0ucTtcbiAgICAgIHRoaXMucV9pZGEgPSB0aGlzLnEyW3RoaXMuaW5kZXhdLmlkO1xuICAgICB9XG4gICB9XG5cbiAgb25JdGVtVGFwKGFyZ3MpIHtcbiAgICBsZXQgcmVzID0gK2FyZ3MuaW5kZXggKyAxO1xuICAgIHRoaXMuZGF0YS5wdXNoKHtpZDogdGhpcy5xX2lkYSwgcmVzcDogcmVzfSk7XG4gICAgaWYodGhpcy5xX2lkYSA8PSA4KXtcbiAgICAgIHRoaXMuZl9hZSArPSByZXM7XG4gICAgfWVsc2UgaWYodGhpcy5xX2lkYSA+IDggJiYgdGhpcy5xX2lkYSA8PSAxNil7XG4gICAgICB0aGlzLmZfY2UgKz0gcmVzO1xuICAgIH1lbHNlIGlmKHRoaXMucV9pZGEgPiAxNiAmJiB0aGlzLnFfaWRhIDw9IDI0KXtcbiAgICAgIHRoaXMuZl9yZSArPSByZXM7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggKys7XG5cbiAgICBpZih0aGlzLmluZGV4ID09IDI0KXtcbiAgICBsZXQgZXh0cmFzOiBOYXZpZ2F0aW9uRXh0cmFzID0ge1xuICAgICAgcXVlcnlQYXJhbXM6IHtcbiAgICAgICAgYXRlbmNpb246IHRoaXMuZl9hZSxcbiAgICAgICAgY2xhcmlkYWQ6IHRoaXMuZl9jZSxcbiAgICAgICAgcmVwYXJhY2lvbjogdGhpcy5mX3JlLFxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpLFxuICAgICAgICB3ZWxjb21lOiB0aGlzLmlkX3dcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnNvbGUuZGlyKHRoaXMuZGF0YSk7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCIvZW5kXCJdLCBleHRyYXMpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5sb2FkUSgpO1xuICAgIH1cbiAgfSAgXG59XG4iXX0=